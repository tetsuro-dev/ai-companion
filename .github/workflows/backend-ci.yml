name: Backend CI

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 pylint mypy
        
    - name: Run tests
      working-directory: ./backend
      env:
        PYTHONPATH: ./backend
        OPENAI_API_KEY: test_key
        AZURE_SPEECH_KEY: test_key
        ZONOS_API_KEY: test_key
      run: |
        python -m pytest tests/integration/test_api_pipeline.py -v
        
    - name: Run linting (informational)
      working-directory: ./backend
      continue-on-error: true
      run: |
        echo "Running linting checks (warnings only)..."
        python -m flake8 app tests --exit-zero
        python -m pylint app tests --exit-zero
        python -m mypy app tests --ignore-missing-imports || true
        echo "Linting completed with warnings"

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pylint mypy pytest-cov bandit
        
    - name: Run tests
      working-directory: ./backend
      run: |
        echo "Running tests..."
        python -m pytest tests/integration/test_api_pipeline.py -v --cov=app --cov-report=xml
        echo "Tests completed successfully"

    - name: Run code quality checks
      working-directory: ./backend
      continue-on-error: true
      run: |
        echo "Running code quality checks..."
        python -m flake8 app tests || echo "Flake8 completed with warnings"
        python -m pylint app tests || echo "Pylint completed with warnings"
        python -m mypy app tests || echo "Mypy completed with warnings"
        echo "Code quality checks completed"
        
    - name: Run security scan
      working-directory: ./backend
      run: |
        bandit -r app/
        
    - name: Run tests with coverage
      working-directory: ./backend
      run: |
        pytest tests/integration/test_api_pipeline.py -v --cov=app --cov-report=xml
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
